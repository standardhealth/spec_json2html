<div class="section-heading">
    <h1>
        The SHR Specification Viewer
    </h1>
    <h2>
        The Standard Health Record is a rapidly evolving specification under active development. Ultimately, an
        individual's SHR will consist of a series of entries relevant to the health of that person. The entries are
        divided among the categories below, and each <a href="/shr/base/#Entry">entry</a> always includes basic
        information about itself (e.g. who created it and when). Click on the entries below to explore details of the
        Standard Health Record. Go to <a href="https://github.com/standardhealth" style="font-weight: 600;">the SHR
        GitHub</a> or <a href="mailto:shr-project-list@lists.mitre.org" style="font-weight: 600;">email the
        collaborative</a> to get involved.
    </h2>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-4 col-md-push-4 col-sm-4 col-sm-push-4">
            <form id="search-form" class="form-group">
                <div class="input-group">
          <span class="input-group-btn">
            <button class="btn btn-primary" aria-label="Click to Search SHR" id="searchSubmitButton"><span
                    class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
          </span>
                    <div id="search">
                        <input id="search-input" class="typeahead form-control" type="text"
                               placeholder="Search SHR Elements">
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="section-content">
    <div class="container">
        {{#each namespaces as |child|}}
            {{#if child}}
                {{#if (containsEntry child)}}
                    {{> shr_index_namespace entryOnly=true}}
                {{/if}}
            {{/if}}
        {{/each}}
    </div>
</div>

<div class="section-content" id="chart-container">
    <div id="legend">

        <svg height="100" width="100" id="legendCircle">
            <circle cx="15" cy="15" r="11" stroke="#6d6b6b" stroke-width="3" fill="#803333"/>
            <text x="30" y="18">Not in same namespace as parent node</text>
        </svg>
    </div>
    <svg class="chart"></svg>
</div>

<script>

    var treeData;
    var parentnode = {name: "SHR", children: []}, nsnode, denode;
    treeData = {{{generateBasedOnHierarchy namespaces}}};

    // Set the dimensions and margins of the diagram
    var margin = {top: 20, right: 90, bottom: 30, left: 90},
            width = 1200 - margin.left - margin.right,
            height = 900 - margin.top - margin.bottom;

    // get the svg object
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var svg = d3.select("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate("
                    + margin.left + "," + margin.top + ")");

    var i = 0,
            duration = 750,
            root;

    // declares a tree layout and assigns the size
    var treemap = d3.tree().size([height, width]);

    // Assigns parent, children, height, depth
    root = d3.hierarchy(treeData, function (d) {
        return d.children;
    });

    root.x0 = height / 2;
    root.y0 = 0;

    // Collapse after the second level
    root.children.forEach(collapse);

    update(root);

    // Collapse the node and all it's children
    function collapse(d) {
        if (d.children) {
            d._children = d.children;

            d._children.forEach(collapse)
            d.children = null
        }
    }

    function update(source) {

        // Assigns the x and y position for the nodes
        var treeData = treemap(root);

        // Compute the new tree layout.
        var nodes = treeData.descendants(),
                links = treeData.descendants().slice(1);

        // Normalize for fixed-depth.
        nodes.forEach(function (d) {
            d.y = d.depth * 180
        });

        // ****************** Nodes section ***************************

        // Update the nodes...
        var node = svg.selectAll('g.node')
                .data(nodes, function (d) {
                    return d.id || (d.id = ++i);
                });

        // Enter any new modes at the parent's previous position.
        var nodeEnter = node.enter().append('g')
                .attr('class', 'node')
                .attr("transform", function (d) {
                    return "translate(" + source.y0 + "," + source.x0 + ")";
                })
                .on('click', click);

        // Add Circle for the nodes
        nodeEnter.append('circle')
                .attr('class', 'node')
                .attr('r', 1e-6)
                .style("fill", function (d) {
                    return d._children ? "#a6a6a6" : "#fff";
                });

        // Add labels for the nodes
        nodeEnter.append('text')
                .attr("dy", ".35em")
                .attr("x", function (d) {
                    return d.children || d._children ? -13 : 13;
                })
                .attr("text-anchor", function (d) {
                    return d.children || d._children ? "end" : "start";
                })
                .text(function (d) {
                    return d.data.name;
                });

        // UPDATE
        var nodeUpdate = nodeEnter.merge(node);

        // Transition to the proper position for the node
        nodeUpdate.transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + d.y + "," + d.x + ")";
                });

        // Update the node attributes and style
        nodeUpdate.select('circle.node')
                .attr('r', 10)
                .style("fill", function (d) {
//                        return d._children ? "#a6a6a6" : "#fff";
//                        return d._children ? "#a6a6a6" : ( d.data.sameNamespace ? "#fff" : "#803333");
                    return d._children ? "#a6a6a6" : ( d.data.isDifferentNamespace ? "#803333" : "#fff");
                })
                .attr('cursor', 'pointer');


        // Remove any exiting nodes
        var nodeExit = node.exit().transition()
                .duration(duration)
                .attr("transform", function (d) {
                    return "translate(" + source.y + "," + source.x + ")";
                })
                .remove();

        // On exit reduce the node circles size to 0
        nodeExit.select('circle')
                .attr('r', 1e-6);

        // On exit reduce the opacity of text labels
        nodeExit.select('text')
                .style('fill-opacity', 1e-6);

        // ****************** links section ***************************

        // Update the links...
        var link = svg.selectAll('path.link')
                .data(links, function (d) {
                    return d.id;
                });

        // Enter any new links at the parent's previous position.
        var linkEnter = link.enter().insert('path', "g")
                .attr("class", "link")
                .attr('d', function (d) {
                    var o = {x: source.x0, y: source.y0}
                    return diagonal(o, o)
                });

        // UPDATE
        var linkUpdate = linkEnter.merge(link);

        // Transition back to the parent element position
        linkUpdate.transition()
                .duration(duration)
                .attr('d', function (d) {
                    return diagonal(d, d.parent)
                });

        // Remove any exiting links
        var linkExit = link.exit().transition()
                .duration(duration)
                .attr('d', function (d) {
                    var o = {x: source.x, y: source.y}
                    return diagonal(o, o)
                })
                .remove();

        // Store the old positions for transition.
        nodes.forEach(function (d) {
            d.x0 = d.x;
            d.y0 = d.y;
        });

        // Creates a curved (diagonal) path from parent to the child nodes
        function diagonal(s, d) {

            path = `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`

            return path
        }

        // Toggle children on click.
        function click(d) {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            } else {
                d.children = d._children;
                d._children = null;
            }
            update(d);
        }
    }

</script>