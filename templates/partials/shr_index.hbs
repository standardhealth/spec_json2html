<div class="section-heading">
  <h1> 
    The SHR Specification Viewer
  </h1>
  <h2>
    The Standard Health Record is a rapidly evolving specification under active development. Ultimately, an individual's SHR will consist of a series of entries relevant to the health of that person. The entries are divided among the categories below, and each <a href="/shr/base/#Entry">entry</a> always includes basic information about itself (e.g. who created it and when). Click on the entries below to explore details of the Standard Health Record. Go to <a href="https://github.com/standardhealth" style="font-weight: 600;">the SHR GitHub</a> or <a href="mailto:shr-project-list@lists.mitre.org" style="font-weight: 600;">email the collaborative</a> to get involved.
  </h2>
</div>
<div class="container">
  <div class="row">
    <div class="col-md-4 col-md-push-4 col-sm-4 col-sm-push-4">
      {{!-- <div class="input-group">
        <input type="text" id="search" class="form-control" placeholder="Search for snippets"/>
        <div class="input-group-btn">
          <button type="button" class="btn btn-primary"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
        </div>
      </div> --}}
      <form id="search-form" class="form-group">
        <div class="input-group">
          <span class="input-group-btn">
            <button class="btn btn-primary" aria-label="Click to Search SHR" id="searchSubmitButton"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
          </span>
          <div id="search">
            <input class="typeahead form-control" type="text" placeholder="Search SHR Elements">
          </div>
        </div>  
      </form>
    </div>
  </div>
</div>
<div class="section-content">
  <div class="container">
    {{#each namespaces as |child|}}
      {{#if child}}
      	{{#if (containsEntry child)}}
        	{{> shr_index_namespace entryOnly=true}}
      	{{/if}}
      {{/if}}
    {{/each}}
  </div>
</div>
<div class="section-content" id="graph-container">
    <div position:relative;width="100%"; height="1900px">
        <div display="inline" id="legend" width="15%" height="1900px" style="float:left">
            <svg id="legendsvg" width="100%" height="100%">
            </svg>
        </div >
        <div display="inline" id="graph" class="chart" width="85%" height="1900px" style="float:right">
            <svg id="graphsvg" width="100%" height="100%">
            </svg>
        </div>
    </div>
    <style>
        #graph-container {
            margin-top: 10%;
        }
        #graph {
            width: 85%;
            height: 1900px;
            style: inline-block;
            border-style: groove;
        }
        #legend {
            width: 15%;
            height: 1900px;
            style:inline-block;
        }
        .text {
            fill: black;
            font: 10px sans-serif;
            text-anchor: start;
        }

        .node {
            fill: #ccc;
            stroke: #fff;
            stroke-width: 1px;
        }

        .link {
            stroke: #777;
            stroke-width: 2px;
        }

    </style>
    <script>
        !(function(){
            "use strict"

            var width,height;
            var chartWidth, chartHeight;
            var margin;
            var svg = d3.select("#graphsvg");
            var chartLayer = svg.append("g").classed("chartLayer", true);
            var colorMap = {};
            var nextColorIndex = 0;

            main();

            function main() {
                var range = 100;
                /*        var data = {
                            nodes:d3.range(0, range).map(function(d){ return {label: "l"+d ,r:~~d3.randomUniform(8, 28)()}}),
                            links:d3.range(0, range).map(function(){ return {source:~~d3.randomUniform(range)(), target:~~d3.randomUniform(range)()} })
                        }*/
                var data = {{{generateBasedOnGraph namespaces}}};

                setSize(data);
                drawChart(data);
                build_legend();
            };

            function setSize(data) {
                width = document.querySelector("#graph").clientWidth;
                height = document.querySelector("#graph").clientHeight;

                console.log("size: " + width + "," + height);
                console.log("#graph");
                console.log(document.querySelector("#graph"));

                margin = {top:0, left:0, bottom:0, right:0 };


                chartWidth = width - (margin.left+margin.right);
                chartHeight = height - (margin.top+margin.bottom);

                svg.attr("width", width).attr("height", height);


                chartLayer
                        .attr("width", chartWidth)
                        .attr("height", chartHeight)
                        .attr("transform", "translate("+[margin.left, margin.top]+")")

                //responsive SVG needs these 2 attributes and no width and height attr
                /*		svg.attr("preserveAspectRatio", "xMinYMin meet")
                            .attr("viewBox", "0 0 600 400")
                            //class to make it responsive
                            .classed("svg-content-responsive", true);*/
            };

            /*	function getRandomColor() {
                    var letters = '0123456789ABCDEF';
                    var color = '#';
                    for (var i = 0; i < 6; i++ ) {
                        color += letters[Math.floor(Math.random() * 16)];
                    }
                    return color;
                }*/

            function build_legend() {
                var text;
                var svg = d3.select("#legendsvg");
                var rect = svg.append('rect') //.transition().duration(500)
                        .attr('width', 100)
                        .attr('height', (colorMap.length * 20))
                        .attr('x', 20)
                        .attr('y', 20)
                        .style('fill', 'white')
                        .attr('stroke', 'black')
                var y = 30;
                for (var key in colorMap) {
                    //console.log(key);
                    text = svg.append('text').text(key)
                            .attr('x', 30)
                            .attr('y', y)
                            .attr('fill', colorMap[key])
                    y = y + 20;
                }
            };

            function colores_google(n) {
                var colores_g = ["#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00", "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707", "#651067", "#329262", "#5574a6", "#3b3eac"];
                return colores_g[n % colores_g.length];
            };

            function getColorForNamespace(namespace) {
                if (colorMap[namespace]) return colorMap[namespace];
                colorMap[namespace] = colores_google(nextColorIndex);
                nextColorIndex = nextColorIndex + 1;
                //console.log("namespace '" + namespace + "'. color = " + colorMap[namespace]);
                return colorMap[namespace];
            };

            function drawChart(data) {

                console.log("data");
                console.log(data);

                svg.call(d3.zoom().on("zoom", function () {
                    chartLayer.attr("transform", d3.event.transform)
                }));

                var simulation = d3.forceSimulation()
                        .force("link", d3.forceLink().id(function(d) { return d.index }).distance(75)) //strength(1)
                        //.force("collide",d3.forceCollide( function(d){return d.r + 16 }).iterations(16) )
                        .force("charge", d3.forceManyBody().strength(-190))
                        .force("center", d3.forceCenter(chartWidth / 2, chartWidth / 2))
                        .force("y", d3.forceY(0))
                        .force("x", d3.forceX(0));

                var link = chartLayer.append("g")
                        .attr("class", "links")
                        .selectAll("line")
                        .data(data.links)
                        .enter()
                        .append("line")
                        .attr("stroke", "darkgray")
//                        .attr("marker-end", "url(#end)"); flip arrow (point to parent)
                        .attr("marker-start", "url(#end)");

                svg.append("svg:defs").selectAll("marker")
                        .data(["end"])      // Different link/path types can be defined here
                        .enter().append("svg:marker")    // This section adds in the arrows
                        .attr("id", String)
                        .attr("viewBox", "0 -5 10 10")
                        .attr("refX",-5)
                        //.attr("refX", 15)  flip arrow (point to parent)
                        .attr("refY", -1.5)
                        .attr("markerWidth", 6)
                        .attr("markerHeight", 6)
                        .attr("orient", "auto")
                        .append("svg:path")
                        .attr("d", "M10,-5L0,0L10,5");
//                        .attr("d", "M0,-5L10,0L0,5"); flip arrow (point to parent)


                var node = chartLayer.append("g")
                        .attr("class", "nodes")
                        .selectAll("circle")
                        .data(data.nodes.filter(function(n) { return n.numlinks > 0; }))
                        .enter().append("circle")
                        //.attr("r", function(d){  return d.r })
                        .attr("r", function(d) { return d.numlinks + 1; })
//                        .attr("r", 5)

                        //				d3.sum(force.links().filter(function(p) {return p.source == d || p.target == d}), function(p) {return p.weight})})
                        .style("fill", function(d,i) { return getColorForNamespace(d.namespace.label ); })
                        .call(d3.drag()
                                .on("start", dragstarted)
                                .on("drag", dragged)
                                .on("end", dragended));

                var text = chartLayer.append("g")
                        .attr("class", "text")
                        .selectAll("text")
                        .data(data.nodes.filter(function(n) { return n.numlinks > 0; }))
                        .enter().append("text")
                        .attr("dx", 12)
                        .attr("dy", ".35em")
                        .text(function(d) { return d.label });

                var ticked = function() {
                    link
                            .attr("x1", function(d) { return d.source.x; })
                            .attr("y1", function(d) { return d.source.y; })
                            .attr("x2", function(d) { return d.target.x; })
                            .attr("y2", function(d) { return d.target.y; });

                    node
                            .attr("cx", function(d) { return d.x; })
                            .attr("cy", function(d) { return d.y; });

                    text
                            .attr("x", function(d) { return d.x; })
                            .attr("y", function(d) { return d.y; });
                };

                simulation
                        .nodes(data.nodes)
                        .on("tick", ticked);

                simulation.force("link")
                        .links(data.links);


                function dragstarted(d) {
                    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                    d.fx = d.x;
                    d.fy = d.y;
                };

                function dragged(d) {
                    d.fx = d3.event.x;
                    d.fy = d3.event.y;
                };

                function dragended(d) {
                    if (!d3.event.active) simulation.alphaTarget(0);
                    d.fx = null;
                    d.fy = null;
                };

            };
        }());
    </script>
</div>
